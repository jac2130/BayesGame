var VIEW_WIDTH=1400;
var VIEW_HEIGHT=800;
function makeBetViewButton(bayesVar)
{
    var betViewButton=makeTextWidget("BETS", 15, "Arial", "#666");
    var callback ={
	bayesVar:bayesVar,
	call: function()
	{
	    if (this.bayesVar.hasActiveView) {
		this.bayesVar.activeView.erase();
	    }
	    this.bayesVar.hasActiveView = true;
	    var betView=makeBettingView(VIEW_WIDTH, VIEW_HEIGHT, this.bayesVar);
	    this.bayesVar.activeView=betView;
	    betView.shape.scaleX = 0.5;
	    betView.shape.scaleY = 0.5;
	    betView.render(stage, Point(100, 70));
	}
    }
    makeClickable2(betViewButton, callback);
    return betViewButton;
}

function makeDoneButton(probSetter, bayesCircle, container, blackFade, dataSwitch, modelSwitch, bettingSwitch, closingSocket, sideBar)
{
    var doneButton = makeTextWidget("x", 20, "Arial black", "#666");
    doneButton.miniHist=false;
    var callback = {
        container: container,
        bayesCircle: bayesCircle,
        probSetter: probSetter,
        doneButton: doneButton,
	closingSocket:closingSocket,
	sideBar:sideBar,
        blackFade: blackFade,
	dataSwitch:dataSwitch,
	modelSwitch:modelSwitch,
	bettingSwitch:bettingSwitch,
        call: function() {
            tutorial.trigger("doneClicked");
            this.container.removeChild(this.blackFade.shape);
	    for (var i=0;i<this.sideBar.Vars.length; i++){
		var vars=this.sideBar.Vars;
		//this.container.removeChild(vars[i].probSetter.shape);
		this.container.removeChild(this.bayesCircle.bayesVar.activeView.shape);
	    };

	    this.container.removeChild(this.dataSwitch.shape);
	    this.container.removeChild(this.modelSwitch.shape);
	    this.container.removeChild(this.bettingSwitch.shape);
	    this.container.removeChild(this.closingSocket.shape);
	    this.sideBar.back(this.doneButton.miniHist);
	    
            

            if (this.bayesCircle.bayesVar.isMultiVar)
            {
                this.container.removeChild(this.bayesCircle.miniHist.shape);
                var vals = this.probSetter.getCurrVals();
                this.bayesCircle.makeMiniHist(vals);
                this.bayesCircle.showMiniHist();
            }
        }
    };
    makeClickable2(doneButton, callback);
    return doneButton;
}

function bayesVarFactory ()
{
    var colors = ["#3B4DD0",  "yellow", "red", "green", "purple", "brown",
                  "DarkRed", "GoldenRod"];
    var BayesVar = {};
    var numVars = 0;
    var makeBayesVar = function(varName, varText, possibilities )
    {
        var newBayesVar = Object.create(BayesVar);
        newBayesVar.color = colors[numVars];
        newBayesVar.varName = varName;
        newBayesVar.varText = varText;
        newBayesVar.possibilities = possibilities;
		newBayesVar.activeCircles=[]
        newBayesVar.varCircles = [];
	newBayesVar.hasActiveView = false;
        newBayesVar.isMultiVar = false;
        newBayesVar.probSetter = makeHist([20, 30, 50], possibilities,
                                  700, 400, 20, newBayesVar.color);
        numVars += 1;

        newBayesVar.addCircle = function ()
        {
            var newVarCircle = makeBayesCircle(20, this.color);
            newVarCircle.bayesVar = this;

            newVarCircle.makeMiniHist = function(vals) 
            { 
                this.miniHistShown = false;
                this.miniHist = makeHist(vals, 
                        this.bayesVar.possibilities,
                        700, 400, 20, this.bayesVar.color);
		this.miniHist.killButton = makeTextWidget("x", 60, "Arial", "#f0f0f0");
/*Now I'm creating the kill switch that allows erasing the little histogram */
        this.miniHist.killButton.miniHist=this.miniHist;
		this.miniHist.killButton.bayesCircle=this;
        this.miniHist.killButton.call=function() {
			if (this.bayesCircle.miniHistShown){
            stage.removeChild(this.miniHist.shape)}
        }

        this.miniHist.killButton.render(this.miniHist.shape, {x:10, y:0});
   
         this.miniHist.shape.on("mouseover", function(evt) {
            this.widget.killButton.changeColor("#666");

             /*Actual interaction with the button*/
	     this.widget.killButton.shape.on("mouseover", function(evt) {
		 this.widget.changeColor("red");
		 this.widget.changeFont("120px " + "Arial");
		 
    });
	     this.widget.killButton.shape.on("mouseout", function(evt) {
        this.widget.changeColor("#666");
	this.widget.changeFont("60px " + "Arial");
    });
             this.widget.killButton.shape.on("mousedown", function(evt) {
             this.widget.changeColor("red");
		 this.widget.changeFont("120px " + "Arial");
             mousePressed = true;
    });

            this.widget.killButton.shape.on("pressup", function(evt) {
            this.widget.changeColor("red");
		this.widget.changeFont("240px " + "Arial");
            this.widget.call();
           
    });
         
    });
        this.miniHist.shape.on("mouseout", function(evt) {
        this.widget.killButton.changeColor("#f0f0f0");
         
    });
        
                this.miniHist.shape.scaleX = 0.2;
                this.miniHist.shape.scaleY = 0.2;
                this.miniHist.offset = {x:-30, y:30};
                this.miniHist.isMini = true;
                if (this.bayesVar.isMultiVar) {
                    this.miniHist.bigHist = this.bayesVar.probSetter.getCurrHist();
                } else {
                    this.miniHist.bigHist = this.bayesVar.probSetter;
                }
                this.miniHist.bigHist.smallHists.push(this.miniHist);
                return this.miniHist;
            }

            newVarCircle.showMiniHist = function()
            {
                this.miniHistShown = true;
                var histX = this.shape.x+this.miniHist.offset.x;
                var histY = this.shape.y+this.miniHist.offset.y;
                this.miniHist.render(stage, Point(histX, histY));
            }

            newVarCircle.makeMiniHist([20, 30, 50]);

            var circleShape = newVarCircle.shape;

            circleShape.on("mousedown", function (evt) {
                var globalPt = this.parent.localToGlobal(this.x, this.y);
                this.parent.removeChild(this);
                this.widget.render(stage, {x:globalPt.x, y:globalPt.y});
                stage.addChild(this);
				
				this.widget.bayesVar.activeCircles.push(this.widget)
                this.widget.justAdded = true;
				console.log("adding happens here")
                
            }, null, true);

            circleShape.on("dblclick", function (evt) {
                var varText = this.widget.bayesVar.varText;
                tutorial.trigger("circleDblClicked", varText);
                var blackFade = makeRect(stageWidth, stageHeight,
                                         "rgba(0, 0, 0, 0.75)");
		
		blackFade.render(stage, {x:0, y:0});
		

		var dataSwitch=makeTextWidget("DATA", 15, "Arial", "#666");
		dataSwitch.render(stage, {x:100, y:55});

		var modelSwitch=makeTextWidget("MODEL", 15, "Arial", "#ffffff");
		modelSwitch.render(stage, {x:150, y:55});

		var bettingSwitch=makeBetViewButton(this.widget.bayesVar);
		bettingSwitch.render(stage, {x:215, y:55});

		var sideBar=this.widget.bayesVar.sideBar;

		var theOne=this.widget.bayesVar;
		
		sideBar.show=function() {
	for (var i=0; i< sideBar.Vars.length; i++) {
	    var variable=sideBar.Vars[i];
	    
	    if (variable===theOne){
		variable.varBarItem2.isActive=false;
		variable.varBarItem2.text.changeColor("#ffffff");
		variable.varBarItem2.varBarButton.changeColor(variable.color);
		variable.varBarItem2.varBarButton.renderW(variable.varBarItem2, {x:30, y:20});
	variable.varBarItem2.text.renderW(variable.varBarItem2, {x:0, y:0});
		variable.varBarItem2.render(stage, {x:5, y:sideBar.Vars[i].varBarItem2.place});
		
	    }
	    else {
		variable.varBarItem2.text.changeColor("rgba(0, 0, 0, 0.01)");

		variable.varBarItem2.varBarButton.changeColor("rgba(0, 0, 0, 0.01)");
		variable.varBarItem2.varBarButton.renderW(variable.varBarItem2, {x:30, y:20});
	variable.varBarItem2.text.renderW(variable.varBarItem2, {x:0, y:0});
		variable.varBarItem2.render(stage, {x:5, y:sideBar.Vars[i].varBarItem2.place})
	    }
	    
	}
    }
		/*closing it all out again*/

		sideBar.back=function(miniHist) {
		    for (var i=0; i< this.Vars.length; i++) {
			var variable=this.Vars[i];
			variable.varBarItem2.erase();

			if (!variable.varBarItem2.isActive){
			    if (miniHist) {
					console.log(variable.activeCircles[0])
				variable.activeCircles[0].showMiniHist();
			    }
			    else {
				if (variable.activeCircles[0].miniHistShown){
				stage.removeChild(variable.activeCircles[0].miniHist.shape)}
			    }
			   
			    variable.varBarItem2.isActive=true;
			    
			        
			};
			
			
		    }

		}

    sideBar.show();
		
		theOne.probSetter.render(stage, {x:100, y:70});
		theOne.hasActiveView = true;
		theOne.activeView = theOne.probSetter;
		
		var closingSocket = WidgetHL();
                closingSocket.doneButton = makeDoneButton(theOne.probSetter, 
							  this.widget, stage, blackFade, dataSwitch, modelSwitch, bettingSwitch, closingSocket, sideBar);

		closingSocket.reduceButton = makeDoneButton(theOne.probSetter, 
							    this.widget, stage, blackFade,  dataSwitch, modelSwitch, bettingSwitch, closingSocket, sideBar);


		closingSocket.doneButton.closingSocket=closingSocket;
		closingSocket.reduceButton.closingSocket=closingSocket;

		closingSocket.reduceButton.miniHist=true;
		closingSocket.reduceButton.changeText("-");
		closingSocket.reduceButton.changeFont("150px Courier")

                closingSocket.doneButton.renderW(closingSocket, {x:0, y:-15});
		closingSocket.reduceButton.renderW(closingSocket, {x:-5, y:-60});

                    closingSocket.render(stage, {x: 5, y: 4});
                
            });

           
			this.varCircles.push(newVarCircle)
			console.log(newVarCircle)
            return newVarCircle;
        }

        newBayesVar.removeCircle = function (varCircle)
        {
            newBayesVar.varCircles.deleteFirstElem(varCircle);
        }

        newBayesVar.showProbSetter = function ()
        {
            //this.probSetter.shape.scaleX = 0.5;
            //this.probSetter.shape.scaleY = 0.5;
        }

        newBayesVar.getFromVars = function ()
        {
            var fromVars = Set();
            for (var i=0;i<this.varCircles.length;i++)
            {
                for (var j=0;j<this.varCircles[i].fromNodes.length;j++)
                {
                    var fromVar = this.varCircles[i].fromNodes[j][0].bayesVar;
                    fromVars.add(fromVar);
                }
            }
            return fromVars.itemList;
        }

        newBayesVar.getMenuChoices = function ()
        {
            var menuChoices = Set();
            var fromVars = this.getFromVars();
            for (var i=0;i<fromVars.length;i++)
            {
                menuChoices.add(fromVars[i].varName);
                for (var j=0;j<fromVars[i].possibilities.length;j++)
                {
                    menuChoices.add(fromVars[i].possibilities[j]);
                }
            }
            return menuChoices;
        }

        return newBayesVar;
    }
    return makeBayesVar;
}

var makeBayesVar = bayesVarFactory();


function createSideBar2(circleCt)
{
    var sideBar = WidgetHL();
    sideBar.barRect = makeRect(108, 800, "#3B4DD0");
    
    sideBar.isLocal=false;
    sideBar.barRect.show=function() {
	this.render(stage, {x:150, y:0});
    };
    if (!sideBar.isLocal){sideBar.barRect.show();}

    var nextYPosition = 70;
    var varBarButtonWidth = 10;
    var varBarButtonHeight=90
    var varSpacing = 20;
    var distBetweenYs = varBarButtonHeight + varSpacing;
    sideBar.Vars=[];

    sideBar.addBayesVar = function(bayesVar)
    {
        var varBarItem = WidgetHL();
	var varBarItem2 = WidgetHL(); 
        varBarItem.bayesVar = bayesVar;
        bayesVar.varBarItem = varBarItem;
	varBarItem2.bayesVar = bayesVar;
        bayesVar.varBarItem2 = varBarItem2;
	this.Vars.push(bayesVar)
	bayesVar.sideBar=this;

        varBarItem.expanded = false;
	varBarItem2.expanded = false;

        varBarItem.varBarButton = makeCircle(25,
					     varBarItem.bayesVar.color, 2, "#ffffff");
	varBarItem2.varBarButton = makeCircle(25,
					     varBarItem.bayesVar.color, 2, "#ffffff");

        varBarItem.varBarButton.renderW(varBarItem, {x:30, y:20});
	varBarItem2.varBarButton.renderW(varBarItem2, {x:30, y:20});


        varBarItem.text = makeTextWidget(bayesVar.varText, 16, "Arial", 
                                         "#666");

	varBarItem2.text = makeTextWidget(bayesVar.varText, 16, "Arial", 
                                         "#ffffff");

        varBarItem.text.renderW(varBarItem, {x:0, y:0});
	varBarItem2.text.renderW(varBarItem2, {x:0, y:0});

	varBarItem.place=nextYPosition;
	varBarItem2.place=nextYPosition;
	varBarItem2.isActive=true;

        varBarItem.render(this.shape, {x:5, y:nextYPosition});
        nextYPosition += distBetweenYs;

	varBarItem2.shape.on("mouseover", function (evt) {
	    if (this.widget.isActive){
	    this.widget.text.changeColor("#ffffff");
	    this.widget.varBarButton.changeColor(this.widget.bayesVar.color);
		this.widget.varBarButton.renderW(this.widget, {x:30, y:20});}

	});
	
	varBarItem2.shape.on("mouseout", function(evt) {
	    if (this.widget.isActive){
            this.widget.text.changeColor("rgba(0, 0, 0, 0.01)");
	    this.widget.varBarButton.changeColor("rgba(0, 0, 0, 0.01)");
		this.widget.varBarButton.renderW(this.widget, {x:30, y:20});}
    });
        varBarItem2.shape.on("mousedown", function(evt) {
	    if (this.widget.isActive){
            this.widget.text.changeColor("red");
	    this.widget.varBarButton.changeColor("red");
	    this.widget.varBarButton.renderW(this.widget, {x:30, y:20});
		mousePressed = true;}
    });
	varBarItem2.shape.on("pressup", function(evt) {
	    if (this.widget.isActive){	
		if (this.widget.bayesVar.activeCircles.length>0) {
		    var varText = this.widget.bayesVar.varText;
		    this.widget.isActive=false;
		    this.widget.text.changeColor("#ffffff");
		    this.widget.bayesVar.probSetter.render(stage, {x:100, y:70});
	    this.widget.varBarButton.changeColor(this.widget.bayesVar.color);
		    var variables = this.widget.bayesVar.sideBar.Vars;

		    for (var i=0; i< variables.length; i++){
			if (variables[i]!==this.widget.bayesVar && (!variables[i].varBarItem2.isActive)) {
			    var v =variables[i];
			    v.probSetter.erase();
			v.varBarItem2.isActive=true;
			v.varBarItem2.text.changeColor("rgba(0, 0, 0, 0.01)");
			v.varBarItem2.varBarButton.changeColor("rgba(0, 0, 0, 0.01)");
			    v.varBarItem2.varBarButton.renderW(v.varBarItem2, {x:30, y:20});}
		    }

		    
		}
		else {
		    
		    this.widget.varBarOption = Object.create(Widget);
                var varBarOption = this.widget.varBarOption;
                varBarOption.setShape(new createjs.Container());
		
                    varBarOption.bkgdRect = makeRect(300, 120, "#fffff0", 3, "#666");

                varBarOption.bkgdRect.renderW(varBarOption, {x:-10, y:0});
		    var message=makeTextWidget("I am sorry, \nyou must first drag the\n"+this.widget.bayesVar.varText + " variable\nout onto the screen\nbefore performing this action!", 20, "Arial", "#666");
		    message.renderW(varBarOption, {x:10, y:10});
		    varBarOption.render(topLayer.shape, {x:315, y:50});
		    this.widget.expanded = true;
			
		    this.widget.text.changeColor(this.widget.bayesVar.color);

	    this.widget.varBarButton.changeColor(this.widget.bayesVar.color);
		    
		}

		this.widget.varBarButton.renderW(this.widget, {x:30, y:20});
		mousePressed = false;
	    }
	});
	varBarItem2.shape.on("rollout", function(evt)
        {
            
                if (this.widget.expanded){this.widget.varBarOption.erase()};
                this.widget.expanded = false;
            
        });
/*
		*/

            

        varBarItem.shape.on("rollover", function (evt) {
            if (!circleMoving) {
                this.widget.varBarOption = Object.create(Widget);
                var varBarOption = this.widget.varBarOption;
                varBarOption.setShape(new createjs.Container());
		
                varBarOption.bkgdRect = makeRect(175, 80, "#331177");
                varBarOption.bkgdRect.renderW(varBarOption, {x:-10, y:0});

                var varCircle = this.widget.bayesVar.addCircle();
                this.widget.varCircle = varCircle;
                var varText = this.widget.bayesVar.varText;
                varCircle.renderW(varBarOption, Point(137, 40));

                varBarOption.render(this, {x:99, y:0});
                this.widget.expanded = true;

                tutorial.trigger("sideBarIconHover", varText);
                varCircle.shape.on("mousedown", function (evt) {
                    sideBar.variablesDragged += 1
                    var varText = this.widget.bayesVar.varText;
                    tutorial.trigger("circleDrag", varText);
                }, null, true);

                varCircle.shape.on("click", function (evt) {
                    var varText = this.widget.bayesVar.varText;
                    tutorial.trigger("circleClicked", varText);
                });

            }
        });
        console.log("checkpoint3");

        varBarItem.shape.on("rollout", function(evt)
        {
            if (this.widget.expanded) {
                this.widget.varBarOption.erase();
                this.widget.expanded = false;
                this.widget.bayesVar.removeCircle(this.widget.varCircle);
            }
        });
    }
    contesVar = makeBayesVar("Contestant Door", "Contestant Door",
                             ["A", "B", "C"]);
 montyVar = makeBayesVar("Monte Door", "Monte Door",
                             ["A", "B", "C"]);
prizeVar = makeBayesVar("Prize Door", "Prize Door",
                             ["A", "B", "C"]);

    sideBar.addBayesVar(contesVar);
    sideBar.addBayesVar(montyVar);
    sideBar.addBayesVar(prizeVar);

    
    sideBar.render(stage, {x:0, y:0});
}
